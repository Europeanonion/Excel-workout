# .clinerules - Excel Workout PWA

## Project Conventions

### File Naming
*   `RULE: Use PascalCase for React component filenames (e.g., ExcelUploader.tsx, WorkoutDisplay.tsx).`
*   `RULE: Use camelCase for utility functions and variables (e.g., parseExcelData, workoutProgram).`
*   `RULE: Use kebab-case for CSS Modules filenames (e.g., excel-uploader.module.css).`

### Data Model
*   `RULE: Always use the defined TypeScript interfaces (WorkoutProgram, Workout, Exercise, WorkoutSession, CompletedExercise, CompletedSet) when working with workout data.`
*   `RULE: Dates should be stored in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ) and handled using UTC to avoid timezone issues.`

### Excel Parsing
*   `RULE: All Excel parsing logic should be encapsulated within the excelParsing feature (src/features/excelParsing).`
*   `RULE: Always use dynamic header mapping to handle variations in Excel file structure.  Do not assume fixed column positions.`
*   `RULE: Provide a user interface for correcting the header mapping if automatic detection fails.`
*   `RULE: Handle potential errors during Excel parsing gracefully (e.g., invalid file format, missing data) and display user-friendly error messages.`

### IndexedDB
* `RULE: All IndexedDB interactions should be done through the \`idb\` library wrapper (src/lib/indexedDB.ts). Do not use the raw IndexedDB API directly.`
* `RULE: Always include error handling for IndexedDB operations (transactions, requests).`

### Firebase
* `RULE: All interactions with Firestore should be encapsulated within the dataSync feature (src/features/dataSync).`
* `RULE: Use environment variables (defined in .env.local) for Firebase configuration values. Do not hardcode API keys or other sensitive information.`
*   `RULE: Use Firebase SDK methods for interacting with Firestore. Avoid using the REST API directly.`
*   `RULE: When querying Firestore, be mindful of the number of documents retrieved. Use pagination or filtering to avoid fetching unnecessary data.`
*   `RULE: Implement Firestore security rules to protect user data (if using authentication).`

## Documentation

### JSDoc
*   `RULE: All functions, classes, and interfaces should have JSDoc comments describing their purpose, parameters, and return values.`
*   `RULE: Use the @param and @returns tags for function parameters and return values.`
*   `RULE: Use the @throws tag to document any errors that a function might throw.`

### README
*   `RULE: Keep the README.md file up-to-date with project setup instructions, API documentation, and any relevant information for developers.`

### Memory Bank
* `RULE: Update the memory bank files (especially activeContext.md and progress.md) after completing significant tasks or making important decisions.`
* `RULE: When requested by the user with "update memory bank", review ALL memory bank files.`

## Code Style

### Linting
*   `RULE: Use ESLint and Prettier (configured by Create React App) to enforce consistent code style and formatting.`
*   `RULE: Run the linter before committing code: npm run lint`

### TypeScript
*   `RULE: Use strict TypeScript (as configured in tsconfig.json).`
*   `RULE: Avoid using `any` type. Use specific types whenever possible.`
*   `RULE: Use interfaces for defining data structures.`

### React
* `RULE: Prefer functional components and hooks over class components.`
* `RULE: Use descriptive component names.`
* `RULE: Keep components small and focused on a single responsibility.`
* `RULE: Use CSS Modules for component styling.`
*   `RULE: Define PropTypes or TypeScript interfaces for all React component props.`
*   `RULE: When updating state based on previous state, use the functional form of \`setState\` (e.g., \`setCount(prevCount => prevCount + 1)\`) to avoid stale state issues.`

## Testing
*   `RULE: Use React Testing Library for writing unit and integration tests.`
*   `RULE: Place tests in the same directory as the component or module they are testing (e.g., ExcelUploader.test.tsx alongside ExcelUploader.tsx).`
*   `RULE: Aim for high test coverage, but prioritize testing critical functionality.`

## Error Handling
*   `RULE: Implement comprehensive error handling throughout the application.`
*   `RULE: Display user-friendly error messages to the user.`
*   `RULE: Log errors to the console (in development) and potentially to a remote logging service (in production).`

## State Management
* `RULE: For simple state management, use React's built-in useState and useContext hooks.`
* `RULE: If the application's state becomes complex, consider using a dedicated state management library (e.g., Redux, Zustand, or Jotai).  This decision should be documented in the memory bank.`
*   `RULE: Use React Context judiciously. Avoid using it for global state that changes frequently, as this can lead to performance issues.  Consider it for infrequently changing data that is needed by many components (e.g., user authentication status, theme).`

## Asynchronous Operations
*   `RULE: Always use async/await for asynchronous operations (e.g., fetching data from Firestore, interacting with IndexedDB).`
*   `RULE: Handle Promises properly. Avoid "dangling" Promises that might not be resolved or rejected.`

## Data Validation
*   `RULE: Validate data received from external sources (Excel files, Firestore) before using it in the application.`
*   `RULE: Consider using a validation library (like Zod or Yup) for more complex validation scenarios.`

## Security
* `RULE: Sanitize user input to prevent cross-site scripting (XSS) vulnerabilities.`
* `RULE: Be mindful of potential security vulnerabilities when handling user data.`

## Performance
* `RULE: Optimize rendering performance by using techniques like memoization (React.memo), useMemo, and useCallback.`
* `RULE: Avoid unnecessary re-renders.`
* `RULE: Profile the application regularly to identify performance bottlenecks.`

## Project Conventions
* `RULE: Use UUIDs to uniquely identify workout programs and sessions.`
* `RULE: Use a timestamp-based merge strategy with user override for data synchronization conflict resolution.`
*   `RULE: The logic for updating a workout program's history should reside within the WorkoutSession component's handleFinishWorkout function, not in WorkoutDetails.`

## Accessibility (a11y)
*   `RULE: Use semantic HTML elements (e.g., <nav>, <main>, <aside>, <article>, <section>, <h1>-<h6>) to structure the content.`
*   `RULE: Provide alternative text for images using the alt attribute.`
*   `RULE: Ensure sufficient color contrast between text and background.`
*   `RULE: Use ARIA attributes where necessary to improve accessibility for screen reader users.`
*   `RULE: Test the application with a screen reader to ensure it is accessible.`

## Version Control
* `RULE: Use descriptive commit messages.`
* `RULE: Use feature branches for developing new features.`
* `RULE: Create pull requests for code reviews before merging changes into the main branch.`
